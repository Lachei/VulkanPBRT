#version 460
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_GOOGLE_include_directive : enable

layout(binding = 0, rgba8) uniform image2D filtered_frame;
layout(binding  = 1, rg32f) uniform image2D prev_frame_pixel;
layout(binding  = 2, r8ui) uniform uimage2D accept_bools;
layout(binding = 3, rgba8) uniform image2D albedo;
layout(binding  = 4, rgba8) uniform image2D tone_mapped_frame;
layout(binding  = 5, r8ui) uniform uimage2D current_spp;
layout(binding  = 6) uniform sampler2D accumulated_prev_frame;
layout(binding  = 7, rgba8) uniform image2D accumulated_frame;
layout(binding = 8) uniform Data{
	uint frame_number;
};

layout (local_size_x = 16,local_size_y = 16,local_size_z=1) in;

#include "shader_util.h"

void main(){
	vec2 imSize = imageSize(filtered_frame);
	if(gl_GlobalInvocationID.x >= imSize.x || gl_GlobalInvocationID.y >= imSize.y) return;

	vec3 filtered_color = imageLoad(filtered_frame, ivec2(gl_GlobalInvocationID)).xyz;
	vec3 prev_color = vec3(0,0,0);
	float blend_alpha = 1.f;

	if(frame_number > 1){
		uint accept = imageLoad(accept_bools, ivec2(gl_GlobalInvocationID)).x;

		if(bool(accept)){
			vec2 pref_frame_pixel = vec2(0,0);			//TODO: read out of texture

			prev_color = texture(accumulated_prev_frame, pref_frame_pixel).xyz;
			uint spp = imageLoad(current_spp, ivec2(gl_GlobalInvocationID)).x;
			blend_alpha = 1.f / spp;
			blend_alpha = max(blend_alpha, SECOND_BLEND_ALPHA);
		}
	}

	// averaging up with previous color and storing the results
	filtered_color = blend_alpha * filtered_color + (1 - blend_alpha) * prev_color;
	imageStore(accumulated_frame, ivec2(gl_GlobalInvocationID), vec4(filtered_color,1));

	// remodulate albedo and tone map
	vec3 my_albedo = imageLoad(albedo, ivec2(gl_GlobalInvocationID)).xyz;
	vec3 tone_mapped_color = clamp(pow(max(vec3(0),my_albedo * filtered_color),vec3(0.454545f)), 0, 1);
	imageStore(tone_mapped_frame, ivec2(gl_GlobalInvocationID), vec4(tone_mapped_color,1));
}