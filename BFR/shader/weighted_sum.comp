#version 460
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_GOOGLE_include_directive : enable

layout(std430, binding = 0) buffer weights{
	float w[];
};

layout(std430, binding = 1) buffer minMax{
	float min_max[];
};
layout(binding  = 2, rgba32f) readonly uniform image2D current_normals;
layout(binding  = 3, rgba32f) readonly uniform image2D current_positions;
layout(binding  = 4, rgba32f) uniform image2D current_noisy;
layout(binding  = 5, rgba32f) uniform image2D denoised;


layout(binding = 6) uniform Data{
	uint frame_number;
};

layout (local_size_x = 16,local_size_y = 16,local_size_z=1) in;

#include "shader_util.h"

void main(){
	uvec2 imSize = imageSize(current_noisy).xy;
	if(gl_GlobalInvocationID.x >= imSize.x || gl_GlobalInvocationID.y >= imSize.y) return;

	vec3 world_position = imageLoad(current_positions,ivec2(gl_GlobalInvocationID)).xyz;
	uint index = (gl_WorkGroupID.y * gl_WorkGroupSize.x + gl_WorkGroupID.x) * 6;
	vec3 world_mins = vec3(min_max[index],min_max[index + 1],min_max[index + 2]);
	vec3 world_maxs = vec3(min_max[index + 3],min_max[index + 4],min_max[index + 5]);
	world_position = (world_position - world_mins) / (world_maxs - world_mins);
	vec3 normal = imageLoad(current_normals,ivec2(gl_GlobalInvocationID)).xyz;

	float features[10] = float[10](
		1,
		world_position.x,
		world_position.y,
		world_position.z,
		world_position.x * world_position.x,
		world_position.y * world_position.y,
		world_position.z * world_position.z,
		normal.x,
		normal.y,
		normal.z
	);

	//Weighted sum
	vec3 color = vec3(0,0,0);
	for(int f = 0; f < 10; ++f){
		float feature = features[f];
		uint id = ((gl_WorkGroupID.y * gl_WorkGroupSize.x + gl_WorkGroupID.x) * (BUFFER_COUNT - 3) + index) * 3;
		
		color += features[f] * vec3(w[id],w[id + 1], w[id + 2]);
	}
	color = clamp(color,0,10);

	imageStore(denoised,ivec2(gl_GlobalInvocationID),vec4(color,1));
};