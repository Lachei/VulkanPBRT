#version 460

#include "bmfrGeneral.comp" //includes all layout declarations and common functions

void main(){
    //--------------------------------------------------------------------------
    // Settings
    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    // Local variables
    //--------------------------------------------------------------------------
    bool pixelAccept = false;
    float pixel_spp = 0;
    ivec2 imSize = ivec2(IMAGE_WIDTH, IMAGE_HEIGHT);
    ivec2 curAbsolutPos = ivec2(gl_GlobalInvocationID.xy) - ivec2(vec2(BLOCK_WIDTH, BLOCK_HEIGHT) * pixelOffsets[camParams.frameNumber % 16]);
    ivec2 curImagePos = mirror(curAbsolutPos, imSize);
    float features[ALPHA_SIZE];

    //--------------------------------------------------------------------------
    // Loading all features and samples
    //--------------------------------------------------------------------------
    vec3 noisyColor = imageLoad(noisy, curImagePos).xyz;
    vec3 pos;
    pos.z = imageLoad(depth, curImagePos).x;
    vec2 compressedNormal = imageLoad(normal, curImagePos).xy;
    vec3 normal;
    normal.x = cos(compressedNormal.y) * sin(compressedNormal.x);
    normal.y = sin(compressedNormal.y) * sin(compressedNormal.x);
    normal.z = cos(compressedNormal.x);
    
    //--------------------------------------------------------------------------
    // normalizing depth and filling the feature maps
    //--------------------------------------------------------------------------
    // normalizing world depth
    switch(POSITION_TYPE){
    case POSITION_DEPTH:{
        float min_val = parallel_reduction_min(pos.z);
        float max_val = parallel_reduction_max(pos.z);
        pos.z -= min_val;
        pos.z /= max_val - min_val + EPS;
        pos.xy = vec2(gl_LocalInvocationID.xy) / (vec2(BLOCK_WIDTH, BLOCK_HEIGHT) - vec2(1));
        break;
    }
    case POSITION_WORLD_DEPTH_NORM:{
        float min_val = parallel_reduction_min(pos.z);
        float max_val = parallel_reduction_max(pos.z);
        pos.z -= min_val;
        pos.z /= max_val - min_val + EPS;
        vec2 pixelCenter = vec2(curImagePos) + vec2(.5);
	    const vec2 normalisedPixelCoord = pixelCenter/vec2(imSize);
	    vec2 clipSpaceCoord = normalisedPixelCoord * 2.0 - 1.0;

	    vec4 worldSpacePos = camParams.inverseViewMatrix * vec4(0,0,0,1);
	    vec4 viewSpaceDir = camParams.inverseProjectionMatrix * vec4(clipSpaceCoord.x, clipSpaceCoord.y, 1, 1) ;
	    vec4 worldSpaceDir = camParams.inverseViewMatrix * vec4(normalize(viewSpaceDir.xyz), 0) ;
        pos.xyz = worldSpaceDir.xyz * pos.z;
        break;
    }
    case POSITION_WORLD:{
        vec2 pixelCenter = vec2(curImagePos) + vec2(.5);
	    const vec2 normalisedPixelCoord = pixelCenter/vec2(imSize);
	    vec2 clipSpaceCoord = normalisedPixelCoord * 2.0 - 1.0;

	    vec4 worldSpacePos = camParams.inverseViewMatrix * vec4(0,0,0,1);
	    vec4 viewSpaceDir = camParams.inverseProjectionMatrix * vec4(clipSpaceCoord.x, clipSpaceCoord.y, 1, 1) ;
	    vec4 worldSpaceDir = camParams.inverseViewMatrix * vec4(normalize(viewSpaceDir.xyz), 0) ;
        pos.xyz = worldSpacePos.xyz + worldSpaceDir.xyz * pos.z;
        for(int i = 0; i < 3; ++i){
            float min_val = parallel_reduction_min(pos[i]);
            float max_val = parallel_reduction_max(pos[i]);
            pos[i] -= min_val;
            pos[i] /= max_val - min_val + EPS;
        }
        break;
    }
    }

    features = float[ALPHA_SIZE](
        1.,
        normal.x,
        normal.y,
        normal.z,
        pos.x,
        pos.y,
        pos.z,
        pos.x * pos.x,
        pos.y * pos.y,
        pos.z * pos.z,
        noisyColor.x,
        noisyColor.y,
        noisyColor.z
    );

    for(int i = 0; i < ALPHA_SIZE; ++i){
        imageStore(featureBuffer, ivec3(gl_GlobalInvocationID.xy, i), vec4(features[i]));
    }
}