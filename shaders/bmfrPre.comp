#version 460

#include "bmfrGeneral.comp" //includes all layout declarations and common functions

int mirror(int x, int s){
    if(x < 0) return abs(x) - 1;
    if(x >= s) return 2 * s - x - 1;
    return x;
}

ivec2 mirror(ivec2 x, ivec2 s){
    return ivec2(mirror(x.x, s.x), mirror(x.y,s.y));
}

void main(){
    //--------------------------------------------------------------------------
    // Settings
    //--------------------------------------------------------------------------
    const uint ALPHA_SIZE = 13;  //contains the features and the noisy pixels: 1, vec3 normal, vec3 worldPos, vec3 worldPos^2

    //--------------------------------------------------------------------------
    // Local variables
    //--------------------------------------------------------------------------
    bool pixelAccept = false;
    float pixel_spp = 0;
    ivec2 imSize = ivec2(IMAGE_WIDTH, IMAGE_HEIGHT);
    ivec2 curAbsolutPos = ivec2(gl_GlobalInvocationID.xy) - ivec2(vec2(BLOCK_WIDTH, BLOCK_HEIGHT) * pixelOffsets[camParams.frameNumber % 16]);
    ivec2 curImagePos = mirror(curAbsolutPos, imSize);
    float features[ALPHA_SIZE];

    //--------------------------------------------------------------------------
    // Loading all features and samples
    //--------------------------------------------------------------------------
    vec3 noisyColor = imageLoad(noisy, curImagePos).xyz;
    float screenDepth = imageLoad(depth, curImagePos).x;
    vec2 compressedNormal = imageLoad(normal, curImagePos).xy;
    vec3 normal;
    normal.x = sin(compressedNormal.y) * cos(compressedNormal.x);
    normal.y = cos(compressedNormal.y) * cos(compressedNormal.x);
    normal.z = sin(compressedNormal.x);
    
    //--------------------------------------------------------------------------
    // normalizing depth and filling the feature maps
    //--------------------------------------------------------------------------
    // normalizing world depth
    {
        float min_val = parallel_reduction_min(screenDepth);
        float max_val = parallel_reduction_max(screenDepth);
        screenDepth -= min_val;
        screenDepth /= max_val - min_val + EPS;
        screenDepth = screenDepth * 2 - 1;
    }
    vec2 screenPos = vec2(gl_LocalInvocationID.xy) / (vec2(BLOCK_WIDTH, BLOCK_HEIGHT) - vec2(1));

    features = float[ALPHA_SIZE](
        1.,
        normal.x,
        normal.y,
        normal.z,
        screenPos.x,
        screenPos.y,
        screenDepth,
        screenPos.x * screenPos.x,
        screenPos.y * screenPos.y,
        screenDepth * screenDepth,
        noisyColor.x,
        noisyColor.y,
        noisyColor.z
    );

    for(int i = 0; i < ALPHA_SIZE; ++i){
        imageStore(featureBuffer, ivec3(gl_GlobalInvocationID.xy, i), vec4(features[i]));
    }
}