#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable

#pragma import_defines (FINAL_IMAGE, FINAL_IMAGE_HQ, GBUFFER, LIGHT_SAMPLE_SURFACE_STRENGTH, LIGHT_SAMPLE_LIGHT_STRENGTH, DEMOD_ILLUMINATION_FLOAT)

#include "ptStructures.glsl"
#include "layoutPTAccel.glsl"
#include "layoutPTImages.glsl"
#include "layoutPTLights.glsl"
#include "layoutPTUniform.glsl"
#include "layoutPTPushConstants.glsl"

layout(location = 0) rayPayloadEXT bool shadowed;
layout(location = 1) rayPayloadEXT RayPayload rayPayload;
uint rayFlags = gl_RayFlagsNoOpaqueEXT | gl_RayFlagsOpaqueEXT;
uint cullMask = 0xff;
float tmin = 0.001;
float tmax = 10000.0;

#include "camera.glsl"
#include "lighting.glsl"

void main(){
    // --------------------------------------------------------------------
	// random engine generation + ray generation (including first hit infos and first hit direct lighting)
	// --------------------------------------------------------------------
    RandomEngine re = rEInit(gl_LaunchIDEXT.xy, camParams.frameNumber);
    vec3 throughput = vec3(1);
    vec4 worldSpacePos, worldSpaceDir;
    bool antiAlias = false;
    #ifdef FINAL_IMAGE
    #ifndef DEMOD_ILLUMINATION
    #ifndef DEMOD_ILLUMINATION_SQUARED
	if(camParams.sampleNumber > 0)
    	antiAlias = true;	//can not be done when reprojecting, never is done for first sample
    #endif
    #endif
    #endif
    createRay(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, antiAlias, re, worldSpacePos, worldSpaceDir);
    traceRayEXT(tlas, rayFlags, cullMask, 0, 0, 0, worldSpacePos.xyz, tmin, worldSpaceDir.xyz, tmax, 1);
    vec3 finalColor = vec3(0);
    finalColor += nextEventEsitmation(rayPayload.position, -normalize(worldSpaceDir.xyz), rayPayload.si, throughput, re);
    finalColor += rayPayload.si.emissiveColor;
    // --------------------------------------------------------------------
	// storing GBuffer information
	// --------------------------------------------------------------------
	vec3 curAlbedo = (rayPayload.si.diffuseColor + rayPayload.si.specularColor).xyz;
	float depth = distance(rayPayload.position, worldSpacePos.xyz);
	vec3 curNorm = rayPayload.si.normal;
#ifdef GBUFFER
	imageStore(depthImage, ivec2(gl_LaunchIDEXT.xy), vec4(depth));
	vec2 compressedNormal;
	compressedNormal.x = acos(rayPayload.si.normal.z);
	compressedNormal.y = atan(rayPayload.si.normal.y, rayPayload.si.normal.x);
	imageStore(normalImage, ivec2(gl_LaunchIDEXT.xy), vec4(compressedNormal, 1, 1));
	float category_id = float(rayPayload.category_id) / 255.0;
	imageStore(materialImage, ivec2(gl_LaunchIDEXT.xy), vec4(category_id, 0, 0, 0));
	imageStore(albedoImage, ivec2(gl_LaunchIDEXT.xy), vec4(curAlbedo, 1));
#endif

    // --------------------------------------------------------------------
	//depth recursion
	// --------------------------------------------------------------------
#if defined FINAL_IMAGE || defined DEMOD_ILLUMINATION || defined DEMOD_ILLUMINATION_SQUARED || defined DEMOD_ILLUMINATION_FLOAT
	if(rayPayload.si.normal != vec3(1)){
		int transDepth = 0;
		for(int i = 0; i < infos.maxRecursionDepth && transDepth < 10; ++i){
			if(rayPayload.si.illuminationType == 7) --i, ++transDepth;
			vec3 v = normalize(worldSpacePos.xyz - rayPayload.position);
			worldSpacePos = vec4(rayPayload.position, 1);
			vec3 indir = indirectLighting(worldSpacePos.xyz, v, rayPayload.si, i, throughput, re);
			finalColor += indir;
		}
	}
#endif

    // --------------------------------------------------------------------
	// final color calculations
	// --------------------------------------------------------------------
	finalColor = clamp(finalColor, vec3(0), vec3(c_MaxRadiance));

#if defined DEMOD_ILLUMINATION_FLOAT
	vec3 demodulated = finalColor;
	if(!isinf(rayPayload.position.x)){
		demodulated = min(finalColor / (curAlbedo + vec3(EPSILON)), vec3(1e3));
	}
	imageStore(illumination, ivec2(gl_LaunchIDEXT.xy), vec4(demodulated, 1));
#endif

#ifdef FINAL_IMAGE
	vec3 prevFrameColor = vec3(0);
	if(camParams.sampleNumber > 0){
		prevFrameColor = imageLoad(outputImage, ivec2(gl_LaunchIDEXT.xy)).xyz;
		float alpha = 1.0 / (camParams.sampleNumber + 1);
		finalColor = mix(SRGBtoLINEAR(vec4(prevFrameColor,1)).xyz, finalColor, alpha);
	}

	finalColor = LINEARtoSRGB(vec4(finalColor, 1)).xyz;
	finalColor = clamp(finalColor, vec3(0), vec3(1));

	imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1));
#endif
}